{"link_serial":103,"update_time":"2017-12-14T21:32:46.329000+00:00","phase_snode_id":null,"scrub_version":"48f99abcdf450e7c49a04015355fb699f785e8cbf8288d894686a64c6caeddd1","update_user_id":"tsemd@bu.edu","class_fqid":"com-snaplogic-pipeline_8","partition_snode_id":"58c70e0fa87b6d76b3470f45","path_id":"/BUDev/projects/JackSkrable_testPull","class_version":8,"snode_id":"5a32edfef405bb0020801f47","snap_map":{"dbbf782a-4237-4573-aa80-e22807d61abb":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc285","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc285","instance_id":"dbbf782a-4237-4573-aa80-e22807d61abb","property_map":{"info":{"notes":{"value":null},"label":{"value":"Compress JSON Objects"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"// Import the interface required by the Script snap.\nimportPackage(com.snaplogic.scripting.language);\n\n// Import the java utility classes.\nimportPackage(java.util);\n\n/**\n * Create an object that implements the methods defined by the \"ScriptHook\"\n * interface.  We'll be passing this object to the constructor for the\n * ScriptHook interface.\n */\nvar impl = {\n    /*\n     * These variables (input, output, error, log) are defined by the\n     * ExecuteScript snap when evaluating this script.\n     */\n    input : input,\n    output : output,\n    error : error,\n    log : log,\n\n    /**\n     * The \"execute()\" method is called once when the pipeline is started\n     * and allowed to process its inputs or just send data to its outputs.\n     */\n    execute : function () {\n        this.log.info(\"Executing Transform Script\");\n        var wrapper = new java.util.HashMap();\n        while (this.input.hasNext()) {\n            var listOfMapping = this.input.next().toString();\n            var mapArray = listOfMapping.split(\",\");\n            var map;\n            for (map in mapArray) {\n                var mapping = mapArray[map].split(\"=\");\n                if (mapping[1] != null && (mapping[1].length() > 0)){ \n                    var last = mapping[1].length();\n                    if(String.fromCharCode(mapping[1].charAt(last-1)) == \"}\") {\n                        last--;\n                    }\n                    var value = mapping[1].substring(0, last);\n                    var key = mapping[0].substring(1);\n                    wrapper.put(key, value);\n                }\n            }\n        }\n        if(wrapper.size() > 0) {\n            this.output.write(wrapper);\n        }\n        this.log.info(\"Transform Script finished\");\n    }\n};\n\n/**\n * The Script Snap will look for a ScriptHook object in the \"hook\"\n * variable.  The snap will then call the hook's \"execute\" method.\n */\nvar hook = new com.snaplogic.scripting.language.ScriptHook(impl);"},"executable_during_suggest":{"value":true},"language":{"value":"Javascript"}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"dbbf782a-4237-4573-aa80-e22807d61abb_1","instance_version":1},"728ccac8-1cb3-4643-ad8d-630cf73cb1fc":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc298","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc298","instance_id":"728ccac8-1cb3-4643-ad8d-630cf73cb1fc","property_map":{"info":{"notes":{"value":null},"label":{"value":"Sleep for 5 mins"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nfrom time import sleep\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            try:\n                # Read the next document, wrap it in a map and write out the wrapper\n                in_doc = self.input.next()\n                sleep(5*60)\n                self.output.write(in_doc)\n            except Exception as e:\n                errWrapper = {\n                    'errMsg' : str(e.args)\n                }\n                self.log.error(\"Error in python script\")\n                self.error.write(errWrapper)\n            \n        self.log.info(\"Finished executing the Transform script\")\n        \n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"executable_during_suggest":{"value":false},"language":{"value":"Python"},"script":{"expression":false,"value":null}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"728ccac8-1cb3-4643-ad8d-630cf73cb1fc_1","instance_version":1},"f63b28b0-10fc-4199-91bc-93540b1c8635":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"script1241","class_fqid":"com-snaplogic-snaps-script-script_2-script1241","instance_id":"f63b28b0-10fc-4199-91bc-93540b1c8635","property_map":{"info":{"notes":{"value":null},"label":{"value":"Remove Prefixes /'asd'/ from Id"}},"view_serial":100,"input":{"input0":{"view_type":{"value":"document"},"label":{"value":"input0"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nimport org.python.core.PyUnicode\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            for key in in_doc:\n                value = in_doc[key]\n                if 'id' in key and type(value) == org.python.core.PyUnicode and '/' in value:\n                    array = in_doc[key].split('/')\n                    size = len(array)\n                    value = array[size-1]\n                out_doc[key] = value\n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"language":{"value":"Python"},"executable_during_suggest":{"value":true}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}}},"instance_fqid":"f63b28b0-10fc-4199-91bc-93540b1c8635_1","instance_version":1},"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc344","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc344","instance_id":"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c","property_map":{"info":{"notes":{"value":null},"label":{"value":"Compress payload"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        wrapper = {}\n        while self.input.hasNext():\n            try:\n                # Read the next document, wrap it in a map and write out the wrapper\n                in_doc = self.input.next()\n                for item in in_doc:\n                    wrapper[item] = in_doc[item]\n            except Exception as e:\n                errWrapper = {\n                    'errMsg' : str(e.args)\n                }\n                self.log.error(\"Error in python script\")\n                self.error.write(errWrapper)\n        self.output.write(wrapper)\n        self.log.info(\"Finished executing the Transform script\")\n        \n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"language":{"value":"Python"},"executable_during_suggest":{"value":true},"script":{"expression":false,"value":null}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c_1","instance_version":1},"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc298","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc298","instance_id":"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7","property_map":{"info":{"notes":{"value":null},"label":{"value":"Transpose Script - Custom Fields ONLY"}},"view_serial":100,"input":{"input0":{"view_type":{"value":"document"},"label":{"value":"input0"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nfrom com.snaplogic.scripting.language.ScriptHook import *\n\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        while self.input.hasNext():\n            in_doc = self.input.next()\n            group = None\n            group = in_doc['group']\n            newData = {}\n            for data in group:\n                newData[data['Field_Name']]=data['Value']\n                newData['tid'] = in_doc['groupBy']['tid']\n            self.output.write(newData)\n        self.log.info(\"Finished executing the Transform script\")\n        \n        \n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"executable_during_suggest":{"value":true},"language":{"value":"Python"}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}}},"instance_fqid":"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7_1","instance_version":1},"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc316","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc316","instance_id":"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe","property_map":{"info":{"notes":{"value":null},"label":{"value":"Remove prefix from the column ':'"}},"view_serial":100,"input":{"input0":{"view_type":{"value":"document"},"label":{"value":"input0"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            for key in in_doc:\n                if len(key.split(':')) > 1:\n                    newKey = key.split(\":\")[1]\n                    out_doc[newKey] = in_doc[key]\n                else:\n                    out_doc[key] = in_doc[key]\n            in_doc.clear()\n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"executable_during_suggest":{"value":true},"language":{"value":"Python"},"script":{"expression":false,"value":null}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}}},"instance_fqid":"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe_1","instance_version":1},"c6388ff4-14bc-43c5-9dd0-980b9d338855":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc298","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc298","instance_id":"c6388ff4-14bc-43c5-9dd0-980b9d338855","property_map":{"info":{"notes":{"value":null},"label":{"value":"Concat and batch all the rows"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"// Import the interface required by the Script snap.\nimportPackage(com.snaplogic.scripting.language);\n\n// Import the java utility classes.\nimportPackage(java.util);\n\n/**\n * Create an object that implements the methods defined by the \"ScriptHook\"\n * interface.  We'll be passing this object to the constructor for the\n * ScriptHook interface.\n */\nvar impl = {\n    /*\n     * These variables (input, output, error, log) are defined by the\n     * ExecuteScript snap when evaluating this script.\n     */\n    input : input,\n    output : output,\n    error : error,\n    log : log,\n\n    /**\n     * The \"execute()\" method is called once when the pipeline is started\n     * and allowed to process its inputs or just send data to its outputs.\n     */\n    execute : function () {\n        this.log.info(\"Executing Transform Script\");\n        var wrapper = new java.util.HashMap();\n        var result = '';\n        var payload = '';\n        var value = '';\n        var counter = 0;\n        while (this.input.hasNext()) {\n            if (counter >= 200) {\n                result = '[' + result.substring(0, result.length-1) + ']';\n                wrapper.put(\"records\", result);\n                this.output.write(wrapper);\n                result = '';\n                wrapper = new java.util.HashMap();\n                counter =0;\n            }\n            payload = ''+this.input.next().toString().split(\"=\")[1];\n            value = payload.substring(0, payload.length-1);\n            result += value + \",\";\n            counter++;\n        }\n        if (counter != 0){\n           result = '[' + result.substring(0, result.length-1) + ']';\n           wrapper.put(\"records\", result);\n           this.output.write(wrapper);\n        }\n        this.log.info(\"Transform Script finished\");\n    }\n};\n\n/**\n * The Script Snap will look for a ScriptHook object in the \"hook\"\n * variable.  The snap will then call the hook's \"execute\" method.\n */\nvar hook = new com.snaplogic.scripting.language.ScriptHook(impl);"},"executable_during_suggest":{"value":true},"language":{"value":"Javascript"}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"c6388ff4-14bc-43c5-9dd0-980b9d338855_1","instance_version":1},"846c5197-13b2-47cb-aa43-d84a1b4e3fe5":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"script1241","class_fqid":"com-snaplogic-snaps-script-script_2-script1241","instance_id":"846c5197-13b2-47cb-aa43-d84a1b4e3fe5","property_map":{"info":{"notes":{"value":null},"label":{"value":"Flattener with _"}},"view_serial":100,"input":{"input0":{"view_type":{"value":"document"},"label":{"value":"input0"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nimport java.util.HashMap\nimport java.util.Arrays\nimport java.util.ArrayList\nimport java.util.LinkedHashMap\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            out_doc = self.createMap(in_doc)\n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n    def createMap(self, oldMap):\n        newMap = {}\n        for key in oldMap:\n            value = oldMap[key]\n            # newMap[key + \"_type\"] = type(value)\n            if type(value) == java.util.LinkedHashMap or type(value) == java.util.ArrayList or type(value) == dict:\n                tempMap = {}\n                if type(value) == java.util.LinkedHashMap:\n                    tempMap = self.createMap(oldMap[key])\n                elif type(value) == java.util.ArrayList:\n                    counter = 1\n                    for listItem in oldMap[key]:\n                        newKey = str(counter)\n                        tempMap[newKey] = listItem\n                        counter = counter + 1 \n                        tempMap = self.createMap(tempMap)\n                for itemKey in tempMap:\n                    newKey = key + '_' + itemKey\n                    newKey = newKey.replace('-', '_')\n                    newMap[newKey] = tempMap[itemKey]\n            else:\n                newKey = key.replace('-', '_')\n                newMap[newKey] = value\n        return newMap\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"executable_during_suggest":{"value":true},"language":{"value":"Python"}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}}},"instance_fqid":"846c5197-13b2-47cb-aa43-d84a1b4e3fe5_1","instance_version":1},"63e76f06-2e52-4494-b9ad-36954fcac3e2":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"script1241","class_fqid":"com-snaplogic-snaps-script-script_2-script1241","instance_id":"63e76f06-2e52-4494-b9ad-36954fcac3e2","property_map":{"info":{"notes":{"value":null},"label":{"value":"Flattener"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nimport java.util.HashMap\nimport java.util.Arrays\nimport java.util.ArrayList\nimport java.util.LinkedHashMap\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            out_doc = self.createMap(in_doc)\n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n    def createMap(self, oldMap):\n        newMap = {}\n        for key in oldMap:\n            value = oldMap[key]\n            # newMap[key + \"_type\"] = type(value)\n            if type(value) == java.util.LinkedHashMap or type(value) == java.util.ArrayList or type(value) == dict:\n                tempMap = {}\n                if type(value) == java.util.LinkedHashMap:\n                    tempMap = self.createMap(oldMap[key])\n                elif type(value) == java.util.ArrayList:\n                    counter = 1\n                    for listItem in oldMap[key]:\n                        newKey = str(counter)\n                        tempMap[newKey] = listItem\n                        counter = counter + 1 \n                        tempMap = self.createMap(tempMap)\n                for itemKey in tempMap:\n                    newKey = key + '_' + itemKey\n                    newMap[newKey] = tempMap[itemKey]\n            else:\n                newMap[key] = value\n        return newMap\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"language":{"value":"Python"},"executable_during_suggest":{"value":true}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"63e76f06-2e52-4494-b9ad-36954fcac3e2_1","instance_version":1},"2c94d300-2e2a-4edd-8cc7-d889bf2892ea":{"class_version":2,"class_id":"com-snaplogic-snaps-transform-jsongenerator","class_build_tag":"transform1622","class_fqid":"com-snaplogic-snaps-transform-jsongenerator_2-transform1622","instance_id":"2c94d300-2e2a-4edd-8cc7-d889bf2892ea","property_map":{"info":{"notes":{"value":null},"label":{"value":"JSON Generator"}},"view_serial":100,"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"## Enter your JSON-encoded data in this space.  Note that this text is\n## treated as an Apache Velocity template, so you can substitute values\n## from input documents or the pipeline parameters.  See the following\n## URL for more information about Velocity:\n##   https://velocity.apache.org/engine/devel/user-guide.html\n\n[\n    {\n        \"msg\" : \"Hello, World\", \n        \"num\" : 1\n    }\n]\n\n\n## Tips:\n##  * The sample data above will generate a single empty document, uncomment\n##    the line in the middle to include the sample fields.  Adding more\n##    objects to the root array will cause the snap to generate more\n##    than one document.\n##  * Pipeline parameters can be referenced by prefixing the parameter\n##    name with an underscore, like so:\n##      ${_pipelineParamName}\n##  * If you add an input view to the snap, this template will be\n##    evaluated for each input document.\n##  * Fields in the input documents can be referenced by prefixing them\n##    with a dollar-sign ($), like so:\n##      $parent.child[0].value\n##  * Any referenced document values and pipeline parameters will\n##    automatically be JSON-encoded when they are inserted into the final\n##    JSON document.  You should not have to worry about escaping values\n##    yourself.\n##  * If you are having troubles getting a template to produce valid JSON,\n##    you can add an error view to the snap to get a document that\n##    contains the output of the template evaluation."},"arrayElementsAsDocuments":{"value":true}}},"instance_fqid":"2c94d300-2e2a-4edd-8cc7-d889bf2892ea_1","instance_version":1},"60d82d68-6b92-4b28-b320-8216249e1682":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc330","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc330","instance_id":"60d82d68-6b92-4b28-b320-8216249e1682","property_map":{"info":{"notes":{"value":null},"label":{"value":"Flatten Map and Cast DataTypes"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\nimport java.util.LinkedHashMap \nimport org.python.core.PyNone\nimport org.python.core.PyBoolean\nimport org.python.core.PyFloat\nimport java.math.BigInteger\nimport java.math.BigDecimal\nimport java.lang.Integer\nimport java.lang.Double\nimport java.lang.Float\nimport org.python.core.PyUnicode\nimport org.python.core.PyString\nfrom org.joda.time import DateTime\nfrom org.joda.time import LocalDate\nimport re\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            for key in in_doc:\n                try:\n                    value = in_doc[key]\n                    if type(value) == java.util.LinkedHashMap:\n                        inner_dict  = value\n                        for inner_key in inner_dict:\n                            out_doc[ str(key) + str(inner_key)] = inner_dict[inner_key]\n                    elif type(value) == org.python.core.PyUnicode or type(value) == org.python.core.PyString:\n                        if re.match(r'[0-9]+[-]+[0-9]+[-]+.*[:]+[0-9]+[:]+[0-9]+', value) != None:\n                            strDate = value.split('.')[0]\n                            if strDate.find('T') < 0:\n                                strDate = strDate.replace(' ', 'T')\n                            try:\n                                out_doc[key] = DateTime.parse(strDate)\n                            except Exception as e:\n                                # Default to a string\n                                out_doc[key] = value\n                        elif re.match(r'^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$', value) != None:\n                            try:\n                                out_doc[key] = LocalDate.parse(value)\n                            except Exception as e:\n                                # Default to a string\n                                out_doc[key] = value\n                        elif value.lower() in ('false','true'):\n                            out_doc[key] = (value.lower() == 'true')\n                        else:\n                            try:\n                                newValue = eval(value)\n                                out_doc[key] = newValue\n                            except:\n                                out_doc[key] = in_doc[key].replace('\\\\u0000', '')\n                    else:\n                        out_doc[key] = in_doc[key]\n                    # out_doc[str(key) + \"type\"] = type(value)\n                except Exception as e:\n                    self.error.write( { 'msg' : str(e), 'data' : in_doc[key] } )\n            in_doc.clear()            \n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"language":{"value":"Python"},"executable_during_suggest":{"value":true},"script":{"expression":false,"value":null}},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"60d82d68-6b92-4b28-b320-8216249e1682_1","instance_version":1},"f7a2a3f8-0507-4f78-8480-646c91234bdf":{"class_version":2,"class_id":"com-snaplogic-snaps-script-script","class_build_tag":"snapsmrc316","class_fqid":"com-snaplogic-snaps-script-script_2-snapsmrc316","instance_id":"f7a2a3f8-0507-4f78-8480-646c91234bdf","property_map":{"info":{"notes":{"value":null},"label":{"value":"Remove prefix from the column"}},"view_serial":100,"input":{"input0":{"view_type":{"value":"document"},"label":{"value":"input0"}}},"settings":{"editable_content":{"value":"# Import the interface required by the Script snap.\nfrom com.snaplogic.scripting.language import ScriptHook\n\nclass TransformScript(ScriptHook):\n    def __init__(self, input, output, error, log):\n        self.input = input\n        self.output = output\n        self.error = error\n        self.log = log\n\n    # The \"execute()\" method is called once when the pipeline is started\n    # and allowed to process its inputs or just send data to its outputs.\n    def execute(self):\n        self.log.info(\"Executing Transform script\")\n        while self.input.hasNext():\n            # Read the next document, wrap it in a map and write out the wrapper\n            in_doc = self.input.next()\n            out_doc = {}\n            for key in in_doc:\n                if len(key.split('.')) > 0:\n                    newKey = key.split(\".\")[1]\n                    out_doc[newKey] = in_doc[key]\n            self.output.write(out_doc)\n        self.log.info(\"Finished executing the Transform script\")\n\n# The Script Snap will look for a ScriptHook object in the \"hook\"\n# variable.  The snap will then call the hook's \"execute\" method.\nhook = TransformScript(input, output, error, log)"},"executable_during_suggest":{"value":true},"language":{"value":"Python"}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}}},"instance_fqid":"f7a2a3f8-0507-4f78-8480-646c91234bdf_1","instance_version":1},"3f7ac5a8-221d-4b8d-a254-6451973bef1d":{"class_version":2,"class_id":"com-snaplogic-snaps-transform-jsongenerator","class_build_tag":"transform1622","class_fqid":"com-snaplogic-snaps-transform-jsongenerator_2-transform1622","instance_id":"3f7ac5a8-221d-4b8d-a254-6451973bef1d","property_map":{"info":{"notes":{"value":null},"label":{"value":"JSON Generator1"}},"view_serial":100,"settings":{"editable_content":{"value":"## Enter your JSON-encoded data in this space.  Note that this text is\n## treated as an Apache Velocity template, so you can substitute values\n## from input documents or the pipeline parameters.  See the following\n## URL for more information about Velocity:\n##   https://velocity.apache.org/engine/devel/user-guide.html\n\n[\n    {\n        \"text\" : \"Flula\",\n        \"subscribers\" : 100\n    }\n]\n\n\n## Tips:\n##  * The sample data above will generate a single empty document, uncomment\n##    the line in the middle to include the sample fields.  Adding more\n##    objects to the root array will cause the snap to generate more\n##    than one document.\n##  * Pipeline parameters can be referenced by prefixing the parameter\n##    name with an underscore, like so:\n##      ${_pipelineParamName}\n##  * If you add an input view to the snap, this template will be\n##    evaluated for each input document.\n##  * Fields in the input documents can be referenced by prefixing them\n##    with a dollar-sign ($), like so:\n##      $parent.child[0].value\n##  * Any referenced document values and pipeline parameters will\n##    automatically be JSON-encoded when they are inserted into the final\n##    JSON document.  You should not have to worry about escaping values\n##    yourself.\n##  * If you are having troubles getting a template to produce valid JSON,\n##    you can add an error view to the snap to get a document that\n##    contains the output of the template evaluation."},"arrayElementsAsDocuments":{"value":true}},"output":{"output0":{"view_type":{"value":"document"},"label":{"value":"output0"}}},"error":{"error0":{"view_type":{"value":"document"},"label":{"value":"error0"}},"error_behavior":{"value":"fail"}}},"instance_fqid":"3f7ac5a8-221d-4b8d-a254-6451973bef1d_1","instance_version":1},"89fb706f-7877-49e8-afe2-da3d42613f2f":{"class_version":2,"class_id":"com-snaplogic-snaps-flow-union","class_build_tag":"flow1574","class_fqid":"com-snaplogic-snaps-flow-union_2-flow1574","instance_id":"89fb706f-7877-49e8-afe2-da3d42613f2f","property_map":{"info":{"label":{"value":"Union"}},"view_serial":100,"input":{"input0":{"label":{"value":"input0"},"view_type":{"value":"document"}},"input1":{"label":{"value":"input1"},"view_type":{"value":"document"}}},"settings":{},"error":{"error0":{"label":{"value":"error0"},"view_type":{"value":"document"}},"error_behavior":{"value":"fail"}},"output":{"output0":{"label":{"value":"output0"},"view_type":{"value":"document"}}}},"instance_fqid":"89fb706f-7877-49e8-afe2-da3d42613f2f_1","instance_version":1}},"org_snode_id":"58c70e0ea87b6d76b3470f3e","path":"/BUDev/projects/JackSkrable_testPull/Utilities","instance_version":1,"migrate_version":"master-2517","scrub_backup":[],"create_user_id":"tsemd@bu.edu","project_snode_id":"5a32ed509dd40f002078509b","property_map":{"info":{"notes":{"value":null},"label":{"value":"Utilities"},"purpose":{"value":null},"pipeline_doc_uri":{"value":null},"author":{"value":"aleung@box.com"}},"output":{"f63b28b0-10fc-4199-91bc-93540b1c8635_output0":{"label":{"value":"Remove Prefixes /'asd'/ from Id - output0"},"view_type":{"value":"document"}},"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7_output0":{"label":{"value":"Transpose Script - Custom Fields ONLY - output0"},"view_type":{"value":"document"}},"f7a2a3f8-0507-4f78-8480-646c91234bdf_output0":{"label":{"value":"Remove prefix from the column - output0"},"view_type":{"value":"document"}},"728ccac8-1cb3-4643-ad8d-630cf73cb1fc_output0":{"view_type":{"value":"document"},"label":{"value":"Sleep for 5 mins - output0"}},"846c5197-13b2-47cb-aa43-d84a1b4e3fe5_output0":{"label":{"value":"Flattener with _ - output0"},"view_type":{"value":"document"}},"63e76f06-2e52-4494-b9ad-36954fcac3e2_output0":{"view_type":{"value":"document"},"label":{"value":"Flattener - output0"}},"c6388ff4-14bc-43c5-9dd0-980b9d338855_output0":{"view_type":{"value":"document"},"label":{"value":"Concat and batch all the rows - output0"}},"dbbf782a-4237-4573-aa80-e22807d61abb_output0":{"view_type":{"value":"document"},"label":{"value":"Compress JSON Objects - output0"}},"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe_output0":{"label":{"value":"Remove prefix from the column ':' - output0"},"view_type":{"value":"document"}},"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c_output0":{"label":{"value":"Compress payload - output0"},"view_type":{"value":"document"}},"60d82d68-6b92-4b28-b320-8216249e1682_output0":{"view_type":{"value":"document"},"label":{"value":"Flatten Map and Cast DataTypes - output0"}}},"settings":{"param_table":{"value":[]}},"input":{"728ccac8-1cb3-4643-ad8d-630cf73cb1fc_input0":{"view_type":{"value":"document"},"label":{"value":"Sleep for 5 mins - input0"}},"f7a2a3f8-0507-4f78-8480-646c91234bdf_input0":{"label":{"value":"Remove prefix from the column - input0"},"view_type":{"value":"document"}},"63e76f06-2e52-4494-b9ad-36954fcac3e2_input0":{"view_type":{"value":"document"},"label":{"value":"Flattener - input0"}},"60d82d68-6b92-4b28-b320-8216249e1682_input0":{"view_type":{"value":"document"},"label":{"value":"Flatten Map and Cast DataTypes - input0"}},"c6388ff4-14bc-43c5-9dd0-980b9d338855_input0":{"view_type":{"value":"document"},"label":{"value":"Concat and batch all the rows - input0"}},"f63b28b0-10fc-4199-91bc-93540b1c8635_input0":{"label":{"value":"Remove Prefixes /'asd'/ from Id - input0"},"view_type":{"value":"document"}},"846c5197-13b2-47cb-aa43-d84a1b4e3fe5_input0":{"label":{"value":"Flattener with _ - input0"},"view_type":{"value":"document"}},"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe_input0":{"label":{"value":"Remove prefix from the column ':' - input0"},"view_type":{"value":"document"}},"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7_input0":{"label":{"value":"Transpose Script - Custom Fields ONLY - input0"},"view_type":{"value":"document"}},"dbbf782a-4237-4573-aa80-e22807d61abb_input0":{"view_type":{"value":"document"},"label":{"value":"Compress JSON Objects - input0"}}},"error":{"error_behavior":{"value":"none"}}},"render_map":{"pan_x_num":0,"default_snaplex":"550326a74338e316a186b986","scale_ratio":1,"detail_map":{"dbbf782a-4237-4573-aa80-e22807d61abb":{"grid_x_int":4,"error":{},"grid_y_int":3,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"728ccac8-1cb3-4643-ad8d-630cf73cb1fc":{"grid_x_int":4,"error":{},"grid_y_int":2,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"f63b28b0-10fc-4199-91bc-93540b1c8635":{"grid_x_int":4,"error":{},"grid_y_int":8,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c":{"grid_x_int":8,"error":{},"grid_y_int":1,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"5d261c52-cc85-4a01-b2ee-3dab92d9a1d7":{"grid_x_int":4,"error":{},"grid_y_int":4,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"57a922f8-e5ba-404c-ab9f-1bb22e6f07fe":{"grid_x_int":4,"error":{},"grid_y_int":10,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"c6388ff4-14bc-43c5-9dd0-980b9d338855":{"grid_x_int":4,"error":{},"grid_y_int":5,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"846c5197-13b2-47cb-aa43-d84a1b4e3fe5":{"grid_x_int":4,"error":{},"grid_y_int":7,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"63e76f06-2e52-4494-b9ad-36954fcac3e2":{"grid_x_int":4,"error":{},"grid_y_int":6,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"2c94d300-2e2a-4edd-8cc7-d889bf2892ea":{"grid_x_int":6,"error":{},"grid_y_int":1,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"60d82d68-6b92-4b28-b320-8216249e1682":{"grid_x_int":4,"error":{},"grid_y_int":9,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"f7a2a3f8-0507-4f78-8480-646c91234bdf":{"grid_x_int":4,"error":{},"grid_y_int":1,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"3f7ac5a8-221d-4b8d-a254-6451973bef1d":{"grid_x_int":6,"error":{},"grid_y_int":2,"rot_tail_int":0,"input":{},"output":{},"rot_int":0},"89fb706f-7877-49e8-afe2-da3d42613f2f":{"grid_x_int":7,"error":{},"grid_y_int":1,"rot_tail_int":0,"input":{"input1":{"dx_int":0,"rot_int":0,"dy_int":1}},"output":{},"rot_int":0}},"pan_y_num":0},"org_id":"58c70e0ea87b6d76b3470f3e","instance_id":"375765e3-6c99-49fb-80ad-0dc70de0515b","class_id":"com-snaplogic-pipeline","create_time":"2017-12-14T21:32:45.895000+00:00","instance_fqid":"375765e3-6c99-49fb-80ad-0dc70de0515b_1","link_map":{"link102":{"src_view_id":"output0","dst_view_id":"input1","src_id":"3f7ac5a8-221d-4b8d-a254-6451973bef1d","dst_id":"89fb706f-7877-49e8-afe2-da3d42613f2f"},"link100":{"src_view_id":"output0","dst_view_id":"input0","src_id":"89fb706f-7877-49e8-afe2-da3d42613f2f","dst_id":"6c0e1beb-9c9c-49a9-80c3-cf7d20ceb98c"},"link101":{"src_view_id":"output0","dst_view_id":"input0","src_id":"2c94d300-2e2a-4edd-8cc7-d889bf2892ea","dst_id":"89fb706f-7877-49e8-afe2-da3d42613f2f"}},"original":{"partition_snode_id":"58c70e0fa87b6d76b3470f45","updated_by":"tsemd@bu.edu","perms":["A","R","W","X"],"time_created":"2017-12-14T21:32:46.329000+00:00","snode_id":"5a32edfef405bb0020801f47","owner":"tsemd@bu.edu","path":"/BUDev/projects/JackSkrable_testPull/Utilities","asset_type":"Pipeline","asset_id":"375765e3-6c99-49fb-80ad-0dc70de0515b","time_updated":"2017-12-14T21:32:46.329000+00:00","name":"Utilities","parent_snode_id":"5a32ed509dd40f002078509b","acl":[],"metadata":{},"original":{"partition_snode_id":"58c70e0fa87b6d76b3470f45","updated_by":"tsemd@bu.edu","perms":["A","R","W","X"],"time_created":"2017-12-14T21:29:52.831000+00:00","snode_id":"5a32ed509dd40f002078509b","owner":"tsemd@bu.edu","path":"/BUDev/projects/JackSkrable_testPull","asset_type":"Dir","asset_id":null,"time_updated":"2017-12-14T21:29:52.831000+00:00","name":"JackSkrable_testPull","parent_snode_id":"58c70e0fa87b6d76b3470f45","acl":[{"perms":["R","W","X"],"subject_type":"USER","inherit":true,"subject":"tsemd@bu.edu"}],"metadata":{},"original":{"partition_snode_id":"5a1eba684503bf001e5a19c6","updated_by":"sdelano@bu.edu","perms":["A","R","W","X"],"time_created":"2017-03-13T21:24:31.092000+00:00","snode_id":"58c70e0fa87b6d76b3470f45","owner":"sdelano1@comcast.net","path":"/BUDev/projects","asset_type":"Dir","asset_id":null,"time_updated":"2017-11-03T14:40:52.927000+00:00","name":"projects","parent_snode_id":"58c70e0ea87b6d76b3470f3e","acl":[{"perms":["R","W","X"],"subject_type":"USER","inherit":true,"subject":"admin@snaplogic.com"},{"perms":["R"],"subject_type":"GROUP","inherit":false,"subject":"members"},{"perms":["R"],"subject_type":"USER","inherit":false,"subject":"mvyravan@bu.edu"},{"perms":["R","W","X"],"subject_type":"USER","inherit":true,"subject":"sdelano1@comcast.net"},{"perms":["R","X","W"],"subject_type":"GROUP","inherit":false,"subject":"Developers"}],"metadata":{}}}}}